import React, { useEffect } from 'react'
import { useSelector, useDispatch } from 'react-redux'
import { Link } from 'react-router-dom'
import { PostAuthor } from './PostAuthor'
import { TimeAgo } from './TimeAgo'
import { ReactionButtons } from './ReactionButtons'
import {
  // selectAllPosts,
  fetchPosts,
  selectPostIds,
  selectPostById,
  selectPostStatus,
  selectPostError,
} from './postsSlice'
import { Spinner } from '../../components/Spinner'

// подготовим и инкапсулируем логику формирования разметки каждого отдельного поста (можно было бы сделать это отдельным компонентом,
// но можно и так)

// продолжим рассматривать улучшение производительности нашего приложения
// в настоящий момент при изменении всего лишь одного поста у нас происходит изменение массива всех постов, так как апдейт явно или неявно
// приводит к получению нового массива и как следствие новой ссылке на него, а так как новый массив приходит в компонент
// PostsList через хук useSelector (который запускается каждый раз при любом диспатче), то при любом изменении одного поста
// будет заново отрисовываться список постов. Это нормальное поведение, но есть одна проблема:
// Рендеринг в Реакте работает так, что если у нас должен перерисоваться родительский компонент, то и все его дочерние компоненты
// будут вынуждены перерисоваться даже, если в них вообще ничего не поменялось. Если у нас будет какой-то очень большой список (например, список
// товаров из 10 000 наименований), то это может круто ударить по производительности приложения, а это уже проблема!
// ==============================
// Способов решения этой проблемы на самом деле хватает:
// ==============================
// 1) Обернуть компонент PostExcerpt в React.memo(). Это решение конкретно для PostExcerpt подходит, так как этот компонент
// зависит только от пропов (то есть никаким другим способом данные в него не приходят и у него нет собственного стейта - в противном
// случае заворачивание в React.memo() НЕ поможет). В нашем случае обёрнутый в React.memo() компонент будет
// перерисовываться только, если изменится проп post, а так как этот проп для каждого поста имеет своё значение, то рендер постов
// перестанет зависеть от рендера других постов.
// ==============================
// 2) Переписать компонент PostsList таким образом, чтобы он брал из глобального стейта массив с ID'шками постов (сделать мемоизированный
// селектор на этот случай, чтобы он возвращал одно и то же, если массив постов не изменился). Это позволит перерисовывать список постов
// только в том случае, если был добавлен / удалён пост. Если какой-то пост изменился, то тогда в целом список мы не рендерим по-новой.
// Можно воспользоваться в этом случае функцией из RTK: createEntityAdapter.
// Затем эти ID'шки прокидывать
// в виде пропов в компоненты PostExcerpt, которые в свою очередь будут по этому ID доставать из глобального стейта объект конкретного поста.
// Опять же тут прикол будет в том, что если конкретный пост не менялся, то и соответствующий селектор ничего нового не вернёт и
// как следствие UI отдельного поста перерисовываться не будет. Также для оптимизации работы хука useSelector мы можем передавать в него shallowEqual
// вторым аргументом. В этом случае будет происходить не строгое сравнение возвращаемых ссылок, а сравнение именно по содержимому.
// ==============================
let PostExcerpt = ({ postId }) => {
  // теперь наш PostExcerpt компонент зависит ТОЛЬКО от postId, а не от целого объекта post (его он теперь получает сам по месту через селектор)
  const post = useSelector((state) => selectPostById(state, postId))

  return (
    <article className="post-excerpt" key={post.id}>
      <h3>{post.title}</h3>
      <div>
        <PostAuthor userId={post.user} />
        <TimeAgo timestamp={post.date} />
      </div>
      <p className="post-content">{post.content.substring(0, 100)}</p>

      <ReactionButtons post={post} />
      <Link to={`/posts/${post.id}`} className="button muted-button">
        View Post
      </Link>
    </article>
  )
}

// PostExcerpt = React.memo(PostExcerpt)

export const PostsList = () => {
  // используем хук useSelector, который позволяет нам извлекать любые "кусочки" глобального стейта, передавая
  // в него (в хук) в качестве коллбэка заранее определённый либо тут же инлайново написанный селектор
  // const posts = useSelector(selectAllPosts)
  const orderedPosts = useSelector(selectPostIds)
  const postStatus = useSelector(selectPostStatus)
  const error = useSelector(selectPostError)

  const dispatch = useDispatch()

  // обычно более свежие посты в приложениях находятся выше, чем более старые, поэтому нам надо отсортировать
  // по дате. Метод sort согласно документации сортирует массив "in place", то есть мутирует, чего делать не надо.
  // Поэтому мы заботливо перед сортировкой воспользуемся методом slice() БЕЗ аргументов, что вернёт копию массива.
  // const sortedPosts = posts.slice().sort((a, b) => b.date.localeCompare(a.data))

  // используем хук useEffect для того, чтобы задать поведение приложения после рендера
  useEffect(() => {
    // мы решили, что будем фетчить посты только тогда когда у нас статус "idle" - то есть ещё не было получения постов в принципе
    if (postStatus === 'idle') {
      dispatch(fetchPosts())
    }
  }, [postStatus, dispatch]) // и хук будет срабатывать только если изменился postStatus и более того postStatus === 'idle'

  // теперь давайте отдельно опишем логику определения того, что мы в итоге будем рендерить, основываясь на том,
  // в какой стадии работа с сервером
  let content

  if (postStatus === 'loading') {
    content = <Spinner text="Loading..." />
  } else if (postStatus === 'succeeded') {
    content = orderedPosts.map((postId) => (
      <PostExcerpt key={postId} postId={postId} />
    ))
  } else if (postStatus === 'failed') {
    content = <div>{error}</div>
  }

  return (
    <section className="posts-list">
      <h2>Posts</h2>
      {content}
    </section>
  )
}
